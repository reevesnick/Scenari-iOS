//
//  MessagesViewController.swift
//  Scenari Messenger
//
//  Created by Neegbeah Reeves on 10/13/16.
//  Copyright Â© 2016 Brown Box Works. All rights reserved.
//

import UIKit
import Messages


class MessagesViewController: MSMessagesAppViewController, UITextFieldDelegate {
    
    @IBOutlet var inputQuestion: UITextField!
    @IBOutlet var characterCount: UILabel!
    @IBOutlet var questionPreivew: UILabel!
    @IBOutlet var imageViewLayout: UIView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        //questionPreivew.text = "\(inputQuestion.text!)";
        questionPreivew.text = "Write a scenario."
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    @IBAction func generateButton(_:AnyObject){
        var str = inputQuestion.text
        questionPreivew!.text = "\(str!)";

    
        
        
    }
    
    func createImageForMessage() -> UIImage? {
        let background = imageViewLayout
        imageViewLayout.frame =  CGRect(x: 100, y: 100, width: 128, height: 128)
        
       // UIGraphicsBeginImageContextWithOptions(background.frame.size, false, UIScreen.main().scale)
        //background.drawHierarchy(in: background.bounds, afterScreenUpdates: true)
        let image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        //background.removeFromSuperview()
        
        return image
    }
    @IBAction func sendButton(_: AnyObject){
        if let image = createImageForMessage(), let conversation = activeConversation {
            let layout = MSMessageTemplateLayout()
            layout.image = image
            layout.caption = "Created via Scenari"
            
            let message = MSMessage()
            message.layout = layout
           // message.url = URL(string: "emptyURL")
          
            conversation.insert(message, completionHandler: { (error: NSError?) in
                print(error)
            })
        }
    }
    

    func textFieldShouldReturn(textField: UITextField) -> Bool {   //delegate method
       // let stringplace: String = inputQuestion.text!;
        questionPreivew.text = "\(inputQuestion.text!)";
        inputQuestion.resignFirstResponder()
        
        return true
    }
    
    // MARK: - Conversation Handling
    
     func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
     func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
     func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
     func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
     func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
     func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
     func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
